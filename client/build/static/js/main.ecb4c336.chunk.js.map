{"version":3,"sources":["components/sub-components/Nav.js","components/pages/Home.js","components/sub-components/Alert.js","components/pages/Join.js","components/pages/Create.js","components/sub-components/ChatContainer.js","components/pages/Chat.js","App.js","serviceWorker.js","index.js"],"names":["Nav","className","href","width","height","viewBox","fill","xmlns","d","Home","Container","Jumbotron","fluid","Button","variant","size","block","AlertDismissible","props","errors","map","error","index","key","length","Alert","onClose","clearErrors","dismissible","Heading","Join","state","room_code","username","joinRoom","event","preventDefault","setState","window","location","handleChange","change","target","name","value","this","Form","Group","controlId","Control","type","placeholder","onChange","Text","id","onClick","e","Component","Create","userName","redirect","route","genRoomCode","result","characters","charactersLength","i","charAt","Math","floor","random","newResult","admin","axios","post","then","response","data","roomCode","catch","console","log","from","to","ChatContainer","messages","message","Chat","chats","socket","io","connect","on","scrollToBottom","animateScroll","containerId","duration","copyId","navigator","clipboard","writeText","handleSubmit","newChat","match","params","emit","chat","code","room_id","get","InputGroup","FormControl","aria-label","aria-describedby","Append","App","exact","path","component","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ecb4c336.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../Main.css\";\n\nconst Nav = () => {\n  return (\n    <div>\n      <div className=\"navbar\">\n        <div className=\"brand\">\n          <a href=\"/\"><h1 className=\"header\">\n            Chatty{\" \"}\n            <svg\n              width=\"1em\"\n              height=\"1em\"\n              viewBox=\"0 0 16 16\"\n              className=\"bi bi-chat-fill\"\n              fill=\"currentColor\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <path d=\"M8 15c4.418 0 8-3.134 8-7s-3.582-7-8-7-8 3.134-8 7c0 1.76.743 3.37 1.97 4.6-.097 1.016-.417 2.13-.771 2.966-.079.186.074.394.273.362 2.256-.37 3.597-.938 4.18-1.234A9.06 9.06 0 0 0 8 15z\" />\n            </svg>\n          </h1>\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Nav;\n","import React from \"react\";\nimport Nav from \"../sub-components/Nav\";\nimport { Button, Container, Jumbotron } from \"react-bootstrap\";\nconst Home = () => {\n  return (\n    <div>\n      <Nav />\n      <Container>\n        <Jumbotron fluid>\n          <Container>\n            <h1 className=\"text-center\">Welcome</h1>\n            <p className=\"text-center\">\n              Chatty is a bi-directional messaging application that utilizes WebSockets.\n            </p>\n          </Container>\n        </Jumbotron>\n        <br></br>\n        <Button variant=\"primary\" size=\"lg\" block href=\"/join\">\n          Join Room\n        </Button>\n        <Button variant=\"danger\" size=\"lg\" block href=\"/create\">\n          Create Session\n        </Button>\n      </Container>\n    </div>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport { Alert } from 'react-bootstrap';\n\nfunction AlertDismissible(props){\n    const errors = props.errors.map((error, index) => {\n        return (\n        <p key={index}>{error}</p>\n        )\n    })\n\n    if (props.errors.length > 0) {\n        return (\n            <Alert variant=\"danger\" onClose={props.clearErrors} dismissible>\n              <Alert.Heading>Whoops!</Alert.Heading>\n              <div>\n              {errors}\n              </div> \n            </Alert>\n          )\n    } else {\n        return (\n            <></> \n        )\n    }\n}\n\nexport default AlertDismissible;","import React, { Component } from 'react';\nimport Nav from \"../sub-components/Nav\";\nimport Alert from \"../sub-components/Alert\";\nimport { Button, Container, Jumbotron, Form } from \"react-bootstrap\";\n\nclass Join extends Component {\n\n  state = {\n    room_code: '',\n    username: '',\n    errors: []\n  }\n\n  joinRoom = (event) => {\n    event.preventDefault()\n    if (this.state.room_code === '' && this.state.username === ''){\n      this.setState({ errors: [\"Please enter your room code and username.\"]})\n    }else if (this.state.room_code === ''){\n      this.setState({ errors: [\"Please enter your room code\"]})\n    }else if (this.state.username === ''){\n      this.setState({ errors: [\"Please enter your username.\"]})\n    }else{\n      window.location.href = `/chat/${this.state.room_code}/${this.state.username}`\n    }\n  }\n\n  handleChange = (event) => {\n    const change = event.target.name;\n    this.setState({ [change]: event.target.value });\n  };\n\n  clearErrors = () => {\n    this.setState({ errors: [] });\n  };\n\n  render() {\n    return (\n      <div>\n        <Nav />\n      <Container>\n        <Jumbotron fluid>\n          <Container>\n            <h1 className=\"text-center\">Join</h1>\n            <p className=\"text-center\">\n              Please enter the four letter room code below.\n            </p>\n            <Alert\n                errors={this.state.errors}\n                clearErrors={(event) => this.clearErrors(event)}\n              />\n            <Form>\n              <Form.Group controlId=\"formBasicEmail\">\n                <Form.Control type=\"email\" placeholder=\"Enter code\" name={\"room_code\"}onChange={(event) => this.handleChange(event)} />\n                <Form.Text className=\"text-muted\">\n                  We'll never share your conversations with anyone else.\n                </Form.Text>\n              </Form.Group>\n              <Form.Group controlId=\"formBasicEmail\">\n                <Form.Control type=\"email\" placeholder=\"Enter username\" name={\"username\"} onChange={(event) => this.handleChange(event)}/>\n                <Form.Text className=\"text-muted\">\n                  In this app, feel free to call yourself whatever you like.\n                </Form.Text>\n              </Form.Group>\n            </Form>\n            <Button variant=\"primary\" size=\"lg\" block id=\"join\" onClick={(e) => this.joinRoom(e)}>\n          Join Room\n        </Button>\n          </Container>\n        </Jumbotron>\n      </Container>\n      </div>\n    );\n  }\n}\n\nexport default Join;\n","import React, { Component } from \"react\";\nimport Nav from \"../sub-components/Nav\";\nimport { Route, Redirect } from 'react-router-dom';\nimport Alert from \"../sub-components/Alert\";\nimport axios from \"axios\";\nimport { Jumbotron, Container, Form, Button } from \"react-bootstrap\";\n\nclass Create extends Component {\n  state = {\n    errors: [],\n    userName: '',\n    redirect: false,\n    route: ''\n  };\n\n\n  clearErrors = () => {\n    this.setState({ errors: [] });\n  };\n\n  handleChange = (event) => {\n      this.setState({ userName: event.target.value })\n  };\n\n  genRoomCode = (event) => {\n    event.preventDefault();\n    if (this.state.userName === ''){\n      this.setState({ errors: [\"Please enter your username.\"] })\n    }else{\n    this.setState({ errors: [] })\n    var result = \"\";\n    var characters =\n      \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    var charactersLength = characters.length;\n    for (var i = 0; i < 5; i++) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    const newResult = {\n        result: result,\n        admin: this.state.userName\n    }\n    axios\n        .post(\"/create\", newResult)\n        .then((response) => {\n            if (response){\n              let route = `/chat/${response.data.roomCode}/${this.state.userName}`\n              this.setState({ route: route })\n              this.setState({ redirect: true })\n            }  \n        })\n        .catch((error) => {\n            console.log(error);\n          });\n  }\n};\n\n  render() {\n    if (!this.state.redirect){\n    return (\n      <div>\n        <Nav />\n        <Container>\n          <Jumbotron fluid>\n            <Container>\n              <h1 className=\"text-center\">Create</h1>\n              <p className=\"text-center\">\n                Please enter your username and then click the button to generate\n                your room's code.\n              </p>\n              <Alert\n                errors={this.state.errors}\n                clearErrors={(event) => this.clearErrors(event)}\n              />\n              <Form>\n                <Form.Group controlId=\"formBasicEmail\">\n                  <Form.Control type=\"email\" placeholder=\"Enter username\" name={\"userName\"} onChange={(event) => this.handleChange(event)}/>\n                </Form.Group>\n              </Form>\n              <Button\n                variant=\"primary\"\n                size=\"lg\"\n                id=\"create\"\n                onClick={this.genRoomCode}\n                block\n              >\n                Create\n              </Button>\n            </Container>\n          </Jumbotron>\n        </Container>\n      </div>\n    );\n  }else{\n    return (\n      <Redirect from=\"/create\" to={this.state.route} />\n      )\n  }\n} \n}\n\nexport default Create;\n","import React from \"react\";\nimport \"../Main.css\";\n\nconst ChatContainer = (props) => {\n  const messages = props.messages.map((message, index) => {\n    return (\n      <div key={index + 3}className=\"chat-flex\">\n        <p className=\"yo\" key={index}>\n          {message.username}:\n        </p>\n        <p className=\"blah\" key={index + 1}>\n            {message.message}\n        </p>\n      </div>\n    );\n  });\n  return <div>{messages}</div>;\n};\n\nexport default ChatContainer;\n","import React, { Component } from \"react\";\nimport { Container, Button, InputGroup, FormControl } from \"react-bootstrap\";\nimport Nav from \"../sub-components/Nav\";\nimport ChatContainer from \"../sub-components/ChatContainer\";\nimport \"../Main.css\";\nimport axios from \"axios\";\nimport io from \"socket.io-client\";\nimport { animateScroll } from \"react-scroll\";\n\nclass Chat extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: \"\",\n      chats: [],\n    };\n\n    this.socket = io.connect(\"https://chatty-react-bw.herokuapp.com/\");\n\n    this.socket.on(\"message\", (message) => {\n      if (this.state.chats.length > 0) {\n        this.setState({ chats: [...this.state.chats, message] });\n        this.scrollToBottom();\n      }\n    });\n\n    this.scrollToBottom = () => {\n      animateScroll.scrollToBottom({\n        containerId: \"chatbox\",\n        duration: 500,\n      });\n    };\n\n    this.handleChange = (event) => {\n      event.preventDefault();\n      this.setState({ message: event.target.value });\n    };\n\n    this.copyId = (e) => {\n      e.preventDefault()\n      navigator.clipboard.writeText(e.target.id)\n    }\n\n    this.handleSubmit = (event) => {\n      event.preventDefault();\n      let newChat = {\n        username: this.props.match.params.username,\n        message: this.state.message,\n      };\n      this.socket.emit(\"message\", newChat);\n      var chat = {\n        username: this.props.match.params.username,\n        message: this.state.message,\n        code: this.props.match.params.room_id,\n      };\n\n      axios\n        .post(\"/chat\", chat)\n        .then((response) => {\n          if (response) {\n            this.setState({ message: \"\" });\n          }\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    };\n  }\n\n  componentDidMount() {\n    axios.get(`/chat/${this.props.match.params.room_id}`).then((response) => {\n      if (response.data.chats.length > 0) {\n        console.log(response.data.chats.length);\n        this.setState({ chats: response.data.chats });\n        this.scrollToBottom();\n      } else {\n        this.setState({\n          chats: [{ username: \"Chatty\", message: \"Say hello!\" }],\n        });\n      }\n    });\n  }\n  render() {\n    return (\n      <div>\n        <Nav />\n        <Container>\n          <div className=\"invite-id\">\n            <h1 className=\"copy-id\">Copy invite ID:</h1>\n            <h1 onClick={(e) => this.copyId(e)} className=\"room-id\" id={this.props.match.params.room_id}>{this.props.match.params.room_id}</h1>\n          </div>\n          <div className=\"chatbox\" id=\"chatbox\">\n            <ChatContainer\n              className=\"chat-container\"\n              messages={this.state.chats}\n            />\n          </div>\n          <InputGroup>\n            <FormControl\n              placeholder=\"Enter your message\"\n              aria-label=\"Recipient's username\"\n              aria-describedby=\"basic-addon2\"\n              value={this.state.message}\n              onChange={(event) => this.handleChange(event)}\n            />\n            <InputGroup.Append>\n              <Button\n                variant=\"primary\"\n                className=\"send\"\n                onClick={this.handleSubmit}\n              >\n                Send\n              </Button>\n            </InputGroup.Append>\n          </InputGroup>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default Chat;\n// import React, { useState, useEffect } from \"react\";\n// import { Container, Button, InputGroup, FormControl } from \"react-bootstrap\";\n// import Nav from \"../sub-components/Nav\";\n// import ChatContainer from \"../sub-components/ChatContainer\";\n// import \"../Main.css\";\n// import axios from \"axios\";\n// import io from \"socket.io-client\";\n\n// const socket = io.connect('http://localhost:3001');\n\n// const Chat = (props) => {\n//   const [message, setMessage] = useState(\"\");\n//   const [chats, setChat] = useState([]);\n//   const [count, setCount] = useState(0)\n\n//   useEffect(() => {\n//     axios.get(`/chat/${props.match.params.room_id}`).then((response) => {\n//       if (response) {\n//         setChat(response.data.chats)\n//       }\n//     });\n//   }, []);\n\n//   const handleChange = (event) => {\n//     event.preventDefault();\n//     setMessage(event.target.value);\n//   };\n\n//   const handleSubmit = (event) => {\n//     event.preventDefault();\n//     let newChat = {\n//       username: props.match.params.username,\n//       message: message\n//     }\n//     socket.emit('message', newChat)\n//     var chat = {\n//       username: props.match.params.username,\n//       message: message,\n//       code: props.match.params.room_id,\n//     };\n\n//     axios\n//       .post(\"/chat\", chat)\n//       .then((response) => {\n//         if (response) {\n//         }\n//       })\n//       .catch((error) => {\n//         console.log(error);\n//       });\n//   };\n\n//   return (\n//     <div>\n//       <Nav />\n//       <Container>\n//         <div className=\"chatbox\">\n//           <ChatContainer className=\"chat-container\" messages={chats} />\n//         </div>\n//         <InputGroup>\n//           <FormControl\n//             placeholder=\"Enter your message\"\n//             aria-label=\"Recipient's username\"\n//             aria-describedby=\"basic-addon2\"\n//             onChange={(event) => handleChange(event)}\n//           />\n//           <InputGroup.Append>\n//             <Button variant=\"primary\" className=\"send\" onClick={handleSubmit}>\n//               Send\n//             </Button>\n//           </InputGroup.Append>\n//         </InputGroup>\n//       </Container>\n//     </div>\n//   );\n// };\n\n// export default Chat;\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Home from './components/pages/Home';\nimport Join from './components/pages/Join';\nimport Create from './components/pages/Create';\nimport Chat from './components/pages/Chat';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n      <Route exact path=\"/\" component={Home} />\n      <Route path=\"/join\" component={Join} />\n      <Route path=\"/create\" component={Create} />\n      <Route path=\"/chat/:room_id?/:username?\" component={Chat} />\n    </Router>\n  ); \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}